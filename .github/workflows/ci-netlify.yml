name: CI/CD Pipeline (prettier ‚Üí lint ‚Üí test ‚Üí build ‚Üí deploy)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

env:
  # Define a pasta raiz do seu projeto
  BASE_DIR: cms-contentful-app

jobs:
  # --------------------------------------------------------------------------------
  # 1. CHECKS (Prettier, Lint, Test) - Correm sequencialmente dentro deste job
  # --------------------------------------------------------------------------------
  checks:
    name: Prettier, Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BASE_DIR }} # Define a pasta de trabalho
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # Adiciona cache para velocidade

      - name: Install dependencies
        run: npm ci

      - name: ‚öôÔ∏è Run Prettier (Check formatting)
        run: npm run prettier

      - name: üîé Run ESLint (Static analysis)
        run: npm run lint

      - name: üß™ Run Jest Tests
        run: npm run test -- --ci --reporters=default

  # --------------------------------------------------------------------------------
  # 2. BUILD - Corre APENAS se o job 'checks' passar
  # --------------------------------------------------------------------------------
  build:
    name: Build (Next Export)
    needs: checks # Depende do sucesso de todos os checks (prettier, lint, test)
    runs-on: ubuntu-latest
    # S√≥ corre em 'main'
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.BASE_DIR }}
        
    
    env:
      # Credenciais Contentful injetadas dos Secrets
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_ENVIRONMENT: ${{ secrets.CONTENTFUL_ENVIRONMENT }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: üèóÔ∏è 1/2 Next Build (Gera o .next)
        # Este passo s√≥ compila
        run: next build
        
      - name: üì¶ 2/2 Next Export (Gera a pasta 'out')
        # Este passo gera a pasta est√°tica 'out' (necess√°ria para o Netlify)
        run: next export
        
      # Agora a pasta 'out' existe na pasta de trabalho
      - name: Prepare Artifact for Deploy
        run: |
          mkdir -p ../out_artifact 
          mv out ../out_artifact/out # Este comando j√° n√£o deve falhar

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cms-contentful-app-out
          path: ../out_artifact/out/ # Caminho relativo √† raiz do workspace

  # --------------------------------------------------------------------------------
  # 3. DEPLOY - Corre APENAS se o 'build' passar
  # --------------------------------------------------------------------------------
  deploy:
    name: Deploy to Netlify
    needs: build # Depende do sucesso do build
    runs-on: ubuntu-latest
    # S√≥ corre em 'main'
    if: github.ref == 'refs/heads/main'
    env:
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: cms-contentful-app-out
          path: out/ # Baixa para uma pasta 'out' na raiz do workspace

      - name:  Deploy to Netlify via CLI
        run: |
          npm install -g netlify-cli # Instala o netlify-cli
          # O diret√≥rio 'out' agora est√° na raiz do workspace
          netlify deploy --dir=out --prod